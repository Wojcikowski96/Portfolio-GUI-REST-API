/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example;

import com.example.model.BlogEntryDTO;
import com.example.model.BlogRequestData;
import com.example.model.CommentDTO;
import com.example.model.Error;
import com.example.model.GetBlogEntries200Response;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-25T12:00:16.786554900+01:00[Europe/Warsaw]")
@Validated
@Tag(name = "blog", description = "the blog API")
public interface BlogApi {

    default BlogApiDelegate getDelegate() {
        return new BlogApiDelegate() {};
    }

    /**
     * POST /blog/entry/comment : Dodaje komentarz do wpisu
     * Komentarze dodawać mogą wszyscy
     *
     * @param commentDTO  (required)
     * @return Dodano komentarz (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "commentBlogEntry",
        summary = "Dodaje komentarz do wpisu",
        responses = {
            @ApiResponse(responseCode = "201", description = "Dodano komentarz"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/blog/entry/comment",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> commentBlogEntry(
        @Parameter(name = "CommentDTO", description = "", required = true) @Valid @RequestBody CommentDTO commentDTO
    ) {
        return getDelegate().commentBlogEntry(commentDTO);
    }


    /**
     * DELETE /blog/entries/delete : Usuwa wpisy
     * Usuwanie dla roli administratora
     *
     * @param entryId  (required)
     * @return Usunięto (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "deleteBlogEntries",
        summary = "Usuwa wpisy",
        responses = {
            @ApiResponse(responseCode = "201", description = "Usunięto"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/blog/entries/delete",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteBlogEntries(
        @NotNull @Parameter(name = "entryId", description = "", required = true) @Valid @RequestParam(value = "entryId", required = true) List<Long> entryId
    ) {
        return getDelegate().deleteBlogEntries(entryId);
    }


    /**
     * DELETE /blog/entry/comment : Usuwa komentarze z wpisu
     * Usuwać może każdy, kto skomentował dany wpis
     *
     * @param commentId  (required)
     * @return Usunięto (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "deleteCommentFromEntry",
        summary = "Usuwa komentarze z wpisu",
        responses = {
            @ApiResponse(responseCode = "201", description = "Usunięto"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/blog/entry/comment",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteCommentFromEntry(
        @NotNull @Parameter(name = "commentId", description = "", required = true) @Valid @RequestParam(value = "commentId", required = true) List<Long> commentId
    ) {
        return getDelegate().deleteCommentFromEntry(commentId);
    }


    /**
     * POST /blog/entries : Pobiera listę wszystkich wpisów
     * Pobiera dane za pomocą danych o paginacji. Pobieranie dostępne dla wszystkich z rolą USER
     *
     * @param blogRequestData  (required)
     * @return Wszystkie wpisy wraz z danymi paginacyjnymi (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "getBlogEntries",
        summary = "Pobiera listę wszystkich wpisów",
        responses = {
            @ApiResponse(responseCode = "200", description = "Wszystkie wpisy wraz z danymi paginacyjnymi", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetBlogEntries200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/blog/entries",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GetBlogEntries200Response> getBlogEntries(
        @Parameter(name = "BlogRequestData", description = "", required = true) @Valid @RequestBody BlogRequestData blogRequestData
    ) {
        return getDelegate().getBlogEntries(blogRequestData);
    }


    /**
     * GET /blog/entry : Pobiera wpis bloga dla danego id
     *
     * @param entryId  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "getBlogEntry",
        summary = "Pobiera wpis bloga dla danego id",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BlogEntryDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blog/entry",
        produces = { "application/json" }
    )
    default ResponseEntity<BlogEntryDTO> getBlogEntry(
        @NotNull @Parameter(name = "entryId", description = "", required = true) @Valid @RequestParam(value = "entryId", required = true) Long entryId
    ) {
        return getDelegate().getBlogEntry(entryId);
    }


    /**
     * GET /blog/file : Pobiera obrazek dla konkretnego wpisu
     * Operacja dostępna dla wszystkich
     *
     * @param entryId  (required)
     * @return obraz (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "getImage",
        summary = "Pobiera obrazek dla konkretnego wpisu",
        responses = {
            @ApiResponse(responseCode = "200", description = "obraz", content = {
                @Content(mediaType = "image/png", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "image/png", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "image/png", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "image/png", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blog/file",
        produces = { "image/png", "application/json" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> getImage(
        @NotNull @Parameter(name = "entryId", description = "", required = true) @Valid @RequestParam(value = "entryId", required = true) Long entryId
    ) {
        return getDelegate().getImage(entryId);
    }


    /**
     * POST /blog/entry : Modyfikuje wpis bloga
     * Modyfikacja wpisu dostępna dla roli Admin. Ustawia się data modyfikacji i stworzenia
     *
     * @param blogEntryDTO  (required)
     * @return Zmodyfikowano wpis (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "saveBlogEntry",
        summary = "Modyfikuje wpis bloga",
        responses = {
            @ApiResponse(responseCode = "201", description = "Zmodyfikowano wpis"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/blog/entry",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> saveBlogEntry(
        @Parameter(name = "BlogEntryDTO", description = "", required = true) @Valid @RequestBody BlogEntryDTO blogEntryDTO
    ) {
        return getDelegate().saveBlogEntry(blogEntryDTO);
    }


    /**
     * POST /blog/entry/uploadImage : Modyfikuje wpis bloga pod kątem dodania obrazka
     * Modyfikacja wpisu dostępna dla roli Admin. Ustawia się data modyfikacji i stworzenia
     *
     * @param entryId  (required)
     * @param name  (optional)
     * @param type  (optional)
     * @param fileByteString  (optional)
     * @return Zmodyfikowano wpis (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "uploadImageBlog",
        summary = "Modyfikuje wpis bloga pod kątem dodania obrazka",
        responses = {
            @ApiResponse(responseCode = "201", description = "Zmodyfikowano wpis"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/blog/entry/uploadImage",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> uploadImageBlog(
        @NotNull @Parameter(name = "entryId", description = "", required = true) @Valid @RequestParam(value = "entryId", required = true) Long entryId,
        @Parameter(name = "name", description = "") @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "type", description = "") @Valid @RequestParam(value = "type", required = false) String type,
        @Parameter(name = "fileByteString", description = "") @RequestPart(value = "fileByteString", required = false) MultipartFile fileByteString
    ) {
        return getDelegate().uploadImageBlog(entryId, name, type, fileByteString);
    }

}
